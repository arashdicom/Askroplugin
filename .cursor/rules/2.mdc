---
description:2
globs:
alwaysApply: true
---
AskMe Project - Master Blueprint (English Version)

Document Version: 2.0
Project: "Askrow" - The 2025 Next-Generation Q&A Platform
Author: Al-Rashidi Center
Official Website: https://arashdi.com
Target Plugin Version: V.1

### Design Philosophy & Frontend Architecture ###
The visual and interactive experience of the "Askrow" plugin is governed by the following core principles and technologies, ensuring a modern, robust, and consistent user interface.

All frontend libraries and assets are managed locally within the plugin. No external CDNs are used. This ensures optimal performance, enhances security, and allows for reliable offline development.

Styling: The user interface is built with Tailwind CSS, a utility-first framework that provides complete design control. This is enhanced by DaisyUI, a component library for Tailwind CSS that provides a beautiful, modern aesthetic and pre-built components out-of-the-box.

JavaScript Libraries: Interactive elements and data visualizations are powered by a suite of modern, locally-hosted JavaScript libraries, including:

1.Chart.js: for dynamic charts and analytics.

2.Swiper.js: for touch-friendly sliders and interactive displays.

3.Cropper.js: for a rich image editing experience upon upload.

and if you need any other library, please let use. 

### Introduction: The Vision - A Living, Merit-Based Community ###

The goal of "Askrow" is not merely to answer questions, but to build a living, sustainable community where quality, expertise, and meaningful participation are rewarded. The XP system is not just a counter; it is a reputation and merit index that unlocks new capabilities, granting users greater roles and responsibilities as their valuable contributions grow.

Task 1.1: Define Core Philosophy & Visual Identity

Philosophy: "Data-Driven Clarity." Every design element must serve a purpose and guide the user.

Visual Identity: We will adopt a clean, modern design inspired by the chosen color palette (a vibrant purple/blue as the primary color with clear functional colors for states like success, error, and warning).

Architectural Principles:

1.Immersive Experience: The plugin will control the entire page layout (70% main content, 30% dynamic sidebar), operating independently of the active WordPress theme.

2.Native Language Support: The design will be built from the ground up to perfectly support both LTR (English) and RTL (Arabic) languages using modern CSS logical properties.

3.Local-First Assets: All third-party libraries (Tailwind CSS, Chart.js, etc.) will be locally managed via NPM for optimal performance and security.

### Phase 2: Building the Main Interface (The Archive Page) ###
Goal: Construct the primary user-facing view of the platform. This is the first impression for visitors and the main hub for browsing knowledge. It must be engaging, fast, and powerful.

Task 2.1: Implement the Main Page Layout

1.Description: Build the fundamental page structure containing the site header, the 70% main content area, and the 30% dynamic sidebar area.
2.Details: The header will contain the logo and primary navigation links ("Questions," "Ask Question," "My Profile"). The sidebar will initially be a placeholder container, ready to be populated with dynamic modules.

Task 2.2: Develop the Question Listing Component

1.Description: Populate the main content area with a dynamic list of questions, with each question rendered as a self-contained "Card" component.
2.Details: Each card will display the question's title, a short excerpt, and key metadata (view count, answer count). The entire card will be clickable, leading to the single question page. The design will feature a clean aesthetic with a subtle shadow that deepens on hover to indicate interactivity.

Task 2.3: Build the Interactive Toolbar
Description: Above the question list, create a toolbar for controlling the displayed content.
Details: The toolbar will feature:
1.AJAX-Powered Sorting Tabs: "Latest," "Most Answered," "Unanswered", "Top Voted" Clicking these will instantly reorder the question list without a page reload.
2.Search Bar: For finding specific questions.
3.Filter Button: A button that opens a modal window, allowing users to filter the list by specific categories and tags.

### Question card design: ###
Description: This task focuses on designing and developing the single most important component of the archive page: the "Question Card." The card must be a rich, data-dense summary of the question and its author, inspired directly by the provided visual reference. It must be clean, professional, and immediately communicate value to the user.

Detailed Breakdown of the Card's Structure and Content:

1.Card Container:The card will be a self-contained block with a base-200 background, rounded corners (rounded-lg), ample padding, and a subtle box-shadow. On hover, the shadow will become more pronounced (hover:shadow-xl) and the card will slightly lift (hover:-translate-y-1) to provide clear visual feedback.

2.Card Header:This section will be a flex container with items aligned to opposite ends (justify-between).
Left Side: The Question Title will be the most prominent element, using a large font size and a bold (font-bold) weight.
Right Side: The Timestamp (e.g., "2 hours ago" or the date) will be displayed in a smaller, lighter font (text-sm, opacity-70).

3.Card Body:

A short, clean Excerpt of the question's content will be displayed directly below the header to provide context. This will be styled with the standard body font size.

4.Card Footer:

4.This is the most information-rich section and will be a flex container (flex, justify-between, items-center) to organize its complex content.

5.Left Side - Author Information Block: This will be a nested flex container (flex, items-center, gap-3) displaying:

5.1.Avatar: A circular user avatar (e.g., 48px).

5.2.Author Details (Vertical Group):

5.2.1.Author Name: Displayed clearly.

5.2.2.Reputation Score: The user's total XP points (e.g., "1250").

5.2.3.Level / Rank: The user's current rank name or level number (e.g., "Lv.12").

5.2.4.Mini XP Progress Bar: A very thin, small progress bar component from DaisyUI, colored with the primary theme color, visually showing the user's progress to the next level.

5.3.Right Side - Question Stats & Status Block: This will be a nested flex container (flex, items-center, gap-4) displaying:

5.3.1.Vote Count: An inline SVG icon (e.g., an arrow up) paired with the total vote score.

Answer Count: An inline SVG icon (e.g., a speech bubble) paired with the number of answers.

View Count: An inline SVG icon (e.g., an eye) paired with the number of views.

Status Badge: A distinct, filled badge (e.g., badge-success) showing the question's status (e.g., "Solved") when applicable.


Task 2.4: Implement the Dynamic Sidebar Modules

Description: Populate the 30% sidebar with context-aware, dynamic modules relevant to the archive page.
Details: The sidebar will contain:
1.Community Stats Module: Live statistics (chart.js) for total questions, total answers, and active users.
2.Login/Register Module: A login/register form with a toggle button to switch between login and register.
3.Top Contributors (Leaderboard) Module: A list of the top 5 users ranked by their XP, displaying their avatars and points.
4.Categories Module: A list of the most popular question categories with their respective post counts.
5.Tags Module: A list of the most popular question tags with their respective post counts.
6.Users Module: A list of the most active users with their respective post counts.
7.Recent Questions Module: A list of the most recent questions with their respective post counts.
8.Popular Questions Module: A list of the most popular questions with their respective post counts.
9.Unanswered Questions Module: A list of the most unanswered questions with their respective post counts.
10.Most Voted Questions Module: A list of the most voted questions with their respective post counts.
11.Most Viewed Questions Module: A list of the most viewed questions with their respective post counts.
12.Most Answered Questions Module: A list of the most answered questions with their respective post counts.
13.Most Active Users Module: A list of the most active users with their respective post counts.


Phase 3: Core Interaction - The Single Question Experience
Goal: Build the heart of the platform where knowledge is exchanged and validated. This phase focuses on the single question page and the question submission form.

Description: Create the detailed view for a single question, its answers, and all associated interactive elements. This is the most critical page for user interaction and must be designed for clarity, engagement, and trust.

Detailed Breakdown of the Single Question Page Structure:

1.Main Question Block:

1.1.A large, visually distinct block with a base-200 background, serving as the focal point of the page.

1.2.Header: Displays the full Question Title in a large, bold font. Next to it, the prominent, colored Status Badge (e.g., "Solved," "Urgent") will be displayed.

1.3.Author Controls: For the question author only, a dropdown menu will appear next to the status badge, allowing them to change the question's status.

1.4.Meta Bar: A clean, horizontal bar below the title showing the author's avatar and name, the post date, and the primary stats (Views, Answers).

2.Answers Section Header:
A clear heading such as "X Answers," sorted by the "Best Answer" first, then by the highest vote score.

3.The Answer Card Component (Highly Detailed):
Each answer will be a self-contained card, separated by ample space.
Best Answer Card: This card will be visually celebrated. It will feature a thick success border, a light green gradient background, a large 👑 crown icon, and a "Best Answer" badge. It will always be pinned to the top of the answers list.

Standard Answer Card:
Layout: A two-column layout within the card itself.
Left Column (Voting & Author):

3.1.Multi-Dimensional Voting: A vertical stack of interactive voting buttons (✔️ Useful, 🧠 Innovative, etc.). Each button will be an icon with a tooltip. The total weighted score will be displayed prominently in the middle. The entire voting process will be instant (AJAX).

3.2.Author Info: Below the voting controls, the answer author's avatar, name, and reputation score (XP) will be displayed.

Right Column (Content & Interaction):

4.1.Answer Body: The full, formatted text of the answer.

4.2.Action Bar: A subtle bar at the bottom of the answer with links to "Share," "Report," and (for the question author) the "Mark as Best Answer" button.

5.Nested Comments System:

5.1.Below the action bar, a "View Comments" link will be present.

5.2.Clicking this link will smoothly expand (animate height) a dedicated comments section for that specific answer.

5.3.Comments will be displayed in a threaded (nested) view, allowing for direct replies.

5.4.Each comment will support Micro-Reactions (👍, ❤️, 🔥).

5.5.A simple form to add a new comment will be at the bottom of the comment thread.


### Advanced "Ask a Question" Form ###

To build a user-friendly, intelligent, and comprehensive interface for submitting new, high-quality questions. This is a critical gateway for user contribution, and its design must minimize friction while maximizing the quality of the input.


Architectural Principles for this Task:

1.Interactive & Responsive: All components must provide immediate feedback (AJAX) and work flawlessly on all devices.
2.Modular: Each feature (e.g., Pre-question Assistant, Image Uploader) should be a self-contained JavaScript module that can be loaded conditionally.
3.User-Guiding: The form should actively guide the user towards creating a better, more answerable question.

Detailed Breakdown of the Form's Structure and Features:

2. The Title Field & Pre-question Assistant:

1.1.Component: A large, prominent <input type="text"> field. It will be the first point of interaction and visually styled to draw focus.

1.2.Feature: Pre-question Assistant (AJAX):

1.2.1.Trigger: An event listener will monitor the keyup event on the title input. A debounce function (set to 500ms) will be used to ensure an AJAX request is only sent after the user has paused typing.

1.2.2.Backend Logic: The AJAX request will send the current title string to a dedicated PHP handler. This handler will perform a targeted WP_Query using the s parameter to search the post_title of the question post type. It will return a JSON array of up to 5 matching questions, including their title, permalink, and status (e.g., "Solved").

1.2.3.Frontend Display: A dropdown container will appear directly below the title field, populated with the results from the AJAX call. Each item will be a clickable link. If a result is marked "Solved," it will have a green checkmark icon next to it. This provides immediate, valuable feedback and is the primary mechanism for preventing duplicate content.

The Rich Text Editor (WYSIWYG):

    Component: A heavily customized instance of the WordPress wp_editor.

    Feature: Custom Toolbar Buttons: The editor's TinyMCE toolbar will be programmatically modified to add custom buttons essential for a technical Q&A platform:

        1.1."Insert Code Block": This button will open a modal window. The modal will feature a large textarea for pasting code and a dropdown to select the language (JavaScript, PHP, CSS, HTML, etc.). Upon insertion, the code will be wrapped in <pre><code class="language-xyz"> tags, ready for a syntax highlighting library like Prism.js or Highlight.js to style on the frontend.

        1.2."Insert Spoiler Tag": This button will wrap any selected text in a custom shortcode, like [askme_spoiler]content[/askme_spoiler], which will be rendered on the frontend as a clickable element to reveal the content.

        1.3."Insert Info/Warning Box": This will provide two options to wrap selected text in styled <div> blocks with classes like askme-notice-info or askme-notice-warning, which will be styled with distinct colors and icons.

Feature: Real-time Quality Feedback:

        1.4.A small JavaScript-powered counter below the editor will display the current word count.

        1.5.If the word count is below a certain threshold (e.g., 20 words), a gentle, non-intrusive warning message will appear: "A more detailed description helps the community understand your problem and gets you better answers."

4. Interactive Image & File Uploader:

    Component: A modern, dashed-border, drag-and-drop file upload area with a fallback "Select Files" button.

Feature: Image Cropper Integration (Cropper.js):

        4.1.Trigger: When a user drops or selects an image file (.jpg, .png, .gif).

        4.2.UI: A modal window will immediately appear, displaying the uploaded image within the Cropper.js interface.

        4.3.Functionality: The user will be able to zoom, pan, and crop the image. The cropper will be configured with a predefined aspect ratio (e.g., 16:9) and a minimum resolution to ensure all attached images are high-quality and visually consistent across the site. The cropped image data will be sent to the server via AJAX for processing.

Feature: Attachment Management:

        4.4.Below the upload area, a list of successfully uploaded files will appear as small preview cards. Each card will show a thumbnail (for images) or an icon (for other files), the filename, and a "Remove" (X) button to delete the attachment before submitting the question.

5. Question Status & Category Selection:

        5.1.Component: A dropdown menu for selecting the question's status (e.g., "Open," "Closed," "Solved").

        5.2.Feature: Category Selection:

        5.2.1.Component: A dropdown menu for selecting the question's category.
        5.2.2.Feature: Tag Selection:
        5.2.3.Component: A dropdown menu for selecting the question's tags.
5. Metadata and Categorization:

    Component: Categories: A user-friendly, searchable dropdown menu for selecting the primary question_category. It will be implemented using a library like TomSelect for a better user experience than a standard <select> element.

    Component: Tags: A modern tag-input field, also powered by TomSelect. This will allow the user to type and either select from a list of existing, auto-suggested t
(Content truncated due to size limit. Use line ranges to read in chunks)